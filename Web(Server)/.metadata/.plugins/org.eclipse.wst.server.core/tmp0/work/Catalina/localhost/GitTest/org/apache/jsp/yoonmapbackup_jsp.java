/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.62
 * Generated at: 2022-05-25 09:06:58 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.smhrd.domain.Post;
import com.smhrd.domain.Marker;
import com.smhrd.domain.Image;
import com.smhrd.domain.ImageDAO;
import java.util.List;
import com.smhrd.domain.Follow;
import com.smhrd.domain.MarkerDAO;
import org.apache.ibatis.reflection.SystemMetaObject;
import com.smhrd.domain.Member;
import com.smhrd.domain.MemberDAO;

public final class yoonmapbackup_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("jar:file:/C:/Users/smhrd/Desktop/윤/Web(Server)/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/GitTest/WEB-INF/lib/standard-1.1.2.jar!/META-INF/c.tld", Long.valueOf(1098678690000L));
    _jspx_dependants.put("/WEB-INF/lib/standard-1.1.2.jar", Long.valueOf(1651644713468L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.smhrd.domain.Marker");
    _jspx_imports_classes.add("org.apache.ibatis.reflection.SystemMetaObject");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("com.smhrd.domain.MemberDAO");
    _jspx_imports_classes.add("com.smhrd.domain.Member");
    _jspx_imports_classes.add("com.smhrd.domain.Follow");
    _jspx_imports_classes.add("com.smhrd.domain.Post");
    _jspx_imports_classes.add("com.smhrd.domain.ImageDAO");
    _jspx_imports_classes.add("com.smhrd.domain.MarkerDAO");
    _jspx_imports_classes.add("com.smhrd.domain.Image");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<html class=\"no-js\" lang=\"\">\r\n");
      out.write("<!--<![endif]-->\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"utf-8\">\r\n");
      out.write("<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\r\n");
      out.write("<title>봄이 오겠조</title>\r\n");
      out.write("<meta name=\"description\" content=\"\">\r\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n");
      out.write("<link rel=\"apple-touch-icon\" href=\"apple-touch-icon.png\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"assets/css/newposting.css\" />\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<link rel=\"stylesheet\" href=\"assets/css/iconfont.css\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"assets/css/slick/slick.css\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"assets/css/slick/slick-theme.css\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"assets/css/stylesheet.css\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"assets/css/font-awesome.min.css\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"assets/css/jquery.fancybox.css\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"assets/css/bootstrap.css\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"assets/css/bootstrap.min.css\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"assets/css/magnific-popup.css\">\r\n");
      out.write("<!--        <link rel=\"stylesheet\" href=\"assets/css/bootstrap-theme.min.css\">-->\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!--For Plugins external css-->\r\n");
      out.write("<link rel=\"stylesheet\" href=\"assets/css/plugins.css\" />\r\n");
      out.write("\r\n");
      out.write("<!--Theme custom css -->\r\n");
      out.write("<link rel=\"stylesheet\" href=\"assets/css/style.css\">\r\n");
      out.write("\r\n");
      out.write("<!--Theme Responsive css-->\r\n");
      out.write("<link rel=\"stylesheet\" href=\"assets/css/responsive.css\" />\r\n");
      out.write("\r\n");
      out.write("<script src=\"assets/js/vendor/modernizr-2.8.3-respond-1.4.2.min.js\"></script>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write(" <style>\r\n");
      out.write("#mapwrap{position:relative;overflow:hidden;}\r\n");
      out.write(".category, .category *{margin:0;padding:0;color:#000;}   \r\n");
      out.write(".category {position:absolute;overflow:hidden;top:10px;left:10px;width:250px;height:50px;z-index:10;border:1px solid black;font-family:'Malgun Gothic','맑은 고딕',sans-serif;font-size:12px;text-align:center;background-color:#fff;}\r\n");
      out.write(".category .menu_selected {background:#FF5F4A;color:#fff;border-left:1px solid #915B2F;border-right:1px solid #915B2F;margin:0 -1px;} \r\n");
      out.write(".category li{list-style:none;float:left;width:50px;height:45px;padding-top:5px;cursor:pointer;} \r\n");
      out.write(".category .ico_comm {display:block;margin:0 auto 2px;width:22px;height:26px;background:url('https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/category.png') no-repeat;} \r\n");
      out.write(".category .ico_basic {background-position:-10px 0;}  \r\n");
      out.write(".category .ico_healing {background-position:-10px -0px;}   \r\n");
      out.write(".category .ico_store {background-position:-10px -0px;}\r\n");
      out.write(".category .ico_pet {background-position:-10px -0px;} \r\n");
      out.write(".category .ico_travel {background-position:-10px -0px;} \r\n");
      out.write("\r\n");
      out.write("*{ \r\n");
      out.write("clip : auto !important;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("img[title]{\r\n");
      out.write("height: 41px !important; \r\n");
      out.write("widyh: 100px !important;\r\n");
      out.write("} \r\n");
      out.write(".info{\r\n");
      out.write("height: 100px !important; \r\n");
      out.write("widyh: 100px !important;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<div id=\"mapwrap\"> \r\n");
      out.write("    <!-- 지도가 표시될 div -->\r\n");
      out.write("    <div id=\"map\" style=\"width:100%;height:350px;\"></div>\r\n");
      out.write("    <!-- 지도 위에 표시될 마커 카테고리 -->\r\n");
      out.write("    <div class=\"category\">\r\n");
      out.write("        <ul>\r\n");
      out.write("            <li id=\"basicMenu\" onclick=\"changeMarker('basic')\">\r\n");
      out.write("                <span class=\"ico_comm ico_basic\"></span>\r\n");
      out.write("                기본\r\n");
      out.write("            </li>\r\n");
      out.write("            <li id=\"healingMenu\" onclick=\"changeMarker('healing')\">\r\n");
      out.write("                <span class=\"ico_comm ico_healing\"></span>\r\n");
      out.write("                힐링\r\n");
      out.write("            </li>\r\n");
      out.write("            <li id=\"storeMenu\" onclick=\"changeMarker('store')\">\r\n");
      out.write("                <span class=\"ico_comm ico_store\"></span>\r\n");
      out.write("                맛집\r\n");
      out.write("            </li>\r\n");
      out.write("            <li id=\"petMenu\" onclick=\"changeMarker('pet')\">\r\n");
      out.write("                <span class=\"ico_comm ico_pet\"></span>\r\n");
      out.write("                애견동반\r\n");
      out.write("            </li>\r\n");
      out.write("            <li id=\"travelMenu\" onclick=\"changeMarker('travel')\">\r\n");
      out.write("                <span class=\"ico_comm ico_travel\"></span>\r\n");
      out.write("                여행\r\n");
      out.write("            </li>\r\n");
      out.write("        </ul>\r\n");
      out.write("    </div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\" src=\"//dapi.kakao.com/v2/maps/sdk.js?appkey=4b2438cac030698bc148f62a014733b9&libraries=services\"></script>\r\n");
      out.write("<script>\r\n");

List<Marker> CarMar1 = (List)session.getAttribute("CarMar1");
List<Marker> CarMar2 = (List)session.getAttribute("CarMar2");
List<Marker> CarMar3 = (List)session.getAttribute("CarMar3");
List<Marker> CarMar4 = (List)session.getAttribute("CarMar4");
List<Marker> CarMar5 = (List)session.getAttribute("CarMar5");

  List<Post> CarPo1 = (List)session.getAttribute("CarPo1");
  List<Post> CarPo2 = (List)session.getAttribute("CarPo2");
  List<Post> CarPo3 = (List)session.getAttribute("CarPo3");
  List<Post> CarPo4 = (List)session.getAttribute("CarPo4");
  List<Post> CarPo5 = (List)session.getAttribute("CarPo5");
 
  
  List<String> image_list1 = (List)session.getAttribute("image_list1");
  List<String> image_list2 = (List)session.getAttribute("image_list2");
  List<String> image_list3 = (List)session.getAttribute("image_list3");
  List<String> image_list4 = (List)session.getAttribute("image_list4");
  List<String> image_list5 = (List)session.getAttribute("image_list5");
  
  

  
  
  System.out.println("1사이즈 : "+CarMar1.size());
  System.out.println("2사이즈 : "+CarMar2.size());
  System.out.println("3사이즈 : "+CarMar3.size());
  System.out.println("4사이즈 : "+CarMar4.size());
  System.out.println("5사이즈 : "+CarMar5.size());
  
  System.out.println("포1 : "+CarPo1.size());
  System.out.println("포2 : "+CarPo2.size());
  System.out.println("포3 : "+CarPo3.size());
  System.out.println("포4 : "+CarPo4.size());
  System.out.println("포5 : "+CarPo5.size());

  
//  System.out.println("이미지1 : "+image_list1.size());
//  System.out.println("이미지2 : "+image_list2.size());
//  System.out.println("이미지3 : "+image_list3.size());
//  System.out.println("이미지4 : "+image_list4.size());
//  System.out.println("이미지5 : "+image_list5.size());
  
  ImageDAO dao = new ImageDAO();
  
  
      out.write("\r\n");
      out.write("\r\n");
      out.write(" var basic1 = [];\r\n");
      out.write(" var healing1 = [];\r\n");
      out.write(" var store1 = [];\r\n");
      out.write(" var pet1 = [];\r\n");
      out.write(" var travel1 = [];\r\n");
      out.write("\r\n");
      out.write(" ");
 for(int i = 0; i<CarPo1.size(); i++){
     
      out.write("basic1.push({content : '<div>글 제목 : ");
      out.print(CarPo1.get(i).getTitle() );
      out.write("</div><div>작성자 : ");
      out.print(CarPo1.get(i).getUser_id() );
      out.write("</div><div>작성일자 : ");
      out.print(CarPo1.get(i).getPost_dt());
      out.write("<!-- <img class=\"info\"  src=\"./upload/");
      out.print(dao.selectImage(CarMar3.get(i).getMarker_seq()));
      out.write("\" /> --><br></div><br>ㅤㅤㅤㅤㅤ'});");


 }
      out.write('\r');
      out.write('\n');
      out.write(' ');
 for(int i = 0; i<CarPo2.size(); i++){
     
      out.write("healing1.push({content : '<div>글 제목 : ");
      out.print(CarPo2.get(i).getTitle() );
      out.write("</div><div>작성자 : ");
      out.print(CarPo2.get(i).getUser_id() );
      out.write("</div><div>작성일자 : ");
      out.print(CarPo2.get(i).getPost_dt());
      out.write("<img class=\"info\" src=\"./upload/");
      out.print(dao.selectImage(CarMar3.get(i).getMarker_seq()));
      out.write("\" /><br></div><br>ㅤㅤㅤㅤㅤ'});");


 }
      out.write('\r');
      out.write('\n');
      out.write(' ');
 for(int i = 0; i<CarPo3.size(); i++){
     
      out.write("store1.push({content : '<div>글 제목 : ");
      out.print(CarPo3.get(i).getTitle() );
      out.write("</div><div>작성자 : ");
      out.print(CarPo3.get(i).getUser_id() );
      out.write("</div><div>작성일자 : ");
      out.print(CarPo3.get(i).getPost_dt());
      out.write("<img class=\"info\"  src=\"./upload/");
      out.print(dao.selectImage(CarMar3.get(i).getMarker_seq()));
      out.write("\" /><br></div><br>ㅤㅤㅤㅤㅤ'});");


 }
      out.write('\r');
      out.write('\n');
      out.write(' ');
 for(int i = 0; i<CarPo4.size(); i++){
     
      out.write("pet1.push({content : '<div>글 제목 : ");
      out.print(CarPo4.get(i).getTitle() );
      out.write("</div><div>작성자 : ");
      out.print(CarPo4.get(i).getUser_id() );
      out.write("</div><div>작성일자 : ");
      out.print(CarPo4.get(i).getPost_dt());
      out.write("<br><img class=\"info\" src=\"./upload/");
      out.print(dao.selectImage(CarMar3.get(i).getMarker_seq()));
      out.write("\" /></div><br>ㅤㅤㅤㅤㅤ'});");


 }
      out.write('\r');
      out.write('\n');
      out.write(' ');
 for(int i = 0; i<CarPo5.size(); i++){
     
      out.write("travel1.push({content : '<div>글 제목 : ");
      out.print(CarPo5.get(i).getTitle() );
      out.write("</div><div>작성자 : ");
      out.print(CarPo5.get(i).getUser_id() );
      out.write("</div><div>작성일자 : ");
      out.print(CarPo5.get(i).getPost_dt());
      out.write("<img class=\"info\" src=\"./upload/");
      out.print(dao.selectImage(CarMar3.get(i).getMarker_seq()));
      out.write("\" /><br></div><br>ㅤㅤㅤㅤㅤ'});");


 }
      out.write("\r\n");
      out.write(" \r\n");
      out.write("var mapContainer = document.getElementById('map'), // 지도를 표시할 div  \r\n");
      out.write("    mapOption = { \r\n");
      out.write("    center: new kakao.maps.LatLng(");
      out.print(CarMar1.get(0).getLATITUDE());
      out.write(',');
      out.write(' ');
      out.print(CarMar1.get(0).getLONGITUDE());
      out.write("), // 지도의 중심좌표 \r\n");
      out.write("        level: 10 // 지도의 확대 레벨 \r\n");
      out.write("    }; \r\n");
      out.write("    \r\n");
      out.write("//마커를 클릭했을 때 해당 장소의 상세정보를 보여줄 커스텀오버레이입니다\r\n");
      out.write("var placeOverlay = new kakao.maps.CustomOverlay({zIndex:1}), \r\n");
      out.write("    contentNode = document.createElement('div'), // 커스텀 오버레이의 컨텐츠 엘리먼트 입니다 \r\n");
      out.write("    markers = [], // 마커를 담을 배열입니다\r\n");
      out.write("    currCategory = ''; // 현재 선택된 카테고리를 가지고 있을 변수입니다\r\n");
      out.write("\r\n");
      out.write("var map = new kakao.maps.Map(mapContainer, mapOption); // 지도를 생성합니다\r\n");
      out.write("\r\n");
      out.write("// 기본 마커가 표시될 좌표 배열입니다\r\n");
      out.write("var basicPositions = [];\r\n");
 for(int i =0; i<CarMar1.size(); i++) {
      out.write("\r\n");
      out.write("basicPositions.push(new kakao.maps.LatLng(");
      out.print(CarMar1.get(i).getLATITUDE());
      out.write(',');
      out.write(' ');
      out.print( CarMar1.get(i).getLONGITUDE());
      out.write("))\r\n");
};
      out.write("\r\n");
      out.write("/* for(var i=0; i<basicPositions.length; i++) {\r\n");
      out.write("console.log(basicPositions[i])} */\r\n");
      out.write("\r\n");
      out.write("// 힐링 마커가 표시될 좌표 배열입니다\r\n");
      out.write("var healingPositions = [];\r\n");
 for(int i = 0; i<CarMar2.size(); i++) { 
      out.write("\r\n");
      out.write("healingPositions.push(new kakao.maps.LatLng(");
      out.print(CarMar2.get(i).getLATITUDE());
      out.write(',');
      out.write(' ');
      out.print( CarMar2.get(i).getLONGITUDE());
      out.write("))\r\n");
};
      out.write("\r\n");
      out.write("//for(var i=0; i<healingPositions.length; i++) {\r\n");
      out.write("//}\r\n");
      out.write("\r\n");
      out.write("// 맛집 마커가 표시될 좌표 배열입니다\r\n");
      out.write("var storePositions = [];\r\n");
 for(int i = 0; i<CarMar3.size(); i++) { 
      out.write("\r\n");
      out.write("storePositions.push(new kakao.maps.LatLng(");
      out.print(CarMar3.get(i).getLATITUDE());
      out.write(',');
      out.write(' ');
      out.print( CarMar3.get(i).getLONGITUDE());
      out.write("))\r\n");
};
      out.write("\r\n");
      out.write("\r\n");
      out.write("//애견동반 마커가 표시될 좌표 배열입니다\r\n");
      out.write("var petPositions = [];\r\n");
 for(int i = 0; i<CarMar4.size(); i++) { 
      out.write("\r\n");
      out.write("petPositions.push(new kakao.maps.LatLng(");
      out.print(CarMar4.get(i).getLATITUDE());
      out.write(',');
      out.write(' ');
      out.print( CarMar4.get(i).getLONGITUDE());
      out.write("))\r\n");
};
      out.write("\r\n");
      out.write("\r\n");
      out.write("//여행 마커가 표시될 좌표 배열입니다\r\n");
      out.write("var travelPositions = [];\r\n");
 for(int i = 0; i<CarMar5.size(); i++) { 
      out.write("\r\n");
      out.write("travelPositions.push(new kakao.maps.LatLng(");
      out.print(CarMar5.get(i).getLATITUDE());
      out.write(',');
      out.write(' ');
      out.print( CarMar5.get(i).getLONGITUDE());
      out.write("))\r\n");
};
      out.write("\r\n");
      out.write("\r\n");
      out.write("var markerImageSrc = 'https://cdn4.iconfinder.com/data/icons/navigation-and-location-5/100/location-11-256.png';  // 마커이미지의 주소입니다. 스프라이트 이미지 입니다\r\n");
      out.write("    basicMarkers = [], // 커피숍 마커 객체를 가지고 있을 배열입니다\r\n");
      out.write("    healingMarkers = [], // 편의점 마커 객체를 가지고 있을 배열입니다\r\n");
      out.write("    storeMarkers = []; // 주차장 마커 객체를 가지고 있을 배열입니다\r\n");
      out.write("    petMarkers = [];\r\n");
      out.write("    travelMarkers = [];\r\n");
      out.write("    \r\n");
      out.write("createBasicMarkers(); // 커피숍 마커를 생성하고 커피숍 마커 배열에 추가합니다\r\n");
      out.write("createHealingMarkers(); // 편의점 마커를 생성하고 편의점 마커 배열에 추가합니다\r\n");
      out.write("createStoreMarkers(); // 주차장 마커를 생성하고 주차장 마커 배열에 추가합니다\r\n");
      out.write("createPetMarkers(); // 주차장 마커를 생성하고 주차장 마커 배열에 추가합니다\r\n");
      out.write("createTravelMarkers(); // 주차장 마커를 생성하고 주차장 마커 배열에 추가합니다\r\n");
      out.write("\r\n");
      out.write("changeMarker('basic'); // 지도에 커피숍 마커가 보이도록 설정합니다 \r\n");
      out.write("changeMarker('healing'); // 지도에 커피숍 마커가 보이도록 설정합니다 \r\n");
      out.write("changeMarker('store'); // 지도에 커피숍 마커가 보이도록 설정합니다 \r\n");
      out.write("changeMarker('pet'); // 지도에 커피숍 마커가 보이도록 설정합니다 \r\n");
      out.write("changeMarker('travel'); // 지도에 커피숍 마커가 보이도록 설정합니다 \r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("// 마커이미지의 주소와, 크기, 옵션으로 마커 이미지를 생성하여 리턴하는 함수입니다\r\n");
      out.write("function createMarkerImage(src, size, options) {\r\n");
      out.write("    var markerImage = new kakao.maps.MarkerImage(src, size, options);\r\n");
      out.write("    return markerImage;            \r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 좌표와 마커이미지를 받아 마커를 생성하여 리턴하는 함수입니다\r\n");
      out.write("function createMarker(position, image) {\r\n");
      out.write("    var marker = new kakao.maps.Marker({\r\n");
      out.write("        position: position,\r\n");
      out.write("        image: image\r\n");
      out.write("    });\r\n");
      out.write("    \r\n");
      out.write("    return marker;  \r\n");
      out.write("}   \r\n");
      out.write("\r\n");
      out.write("//기본 마커를 생성하고 커피숍 마커 배열에 추가하는 함수입니다\r\n");
      out.write("function createBasicMarkers() {\r\n");
      out.write("    \r\n");
      out.write("    for (var i = 0; i < basicPositions.length; i++) {  \r\n");
      out.write("        \r\n");
      out.write("        var imageSize = new kakao.maps.Size(22, 26),\r\n");
      out.write("            imageOptions = {  \r\n");
      out.write("                spriteOrigin: new kakao.maps.Point(10, 0),    \r\n");
      out.write("                spriteSize: new kakao.maps.Size(36, 98)  \r\n");
      out.write("            };     \r\n");
      out.write("        \r\n");
      out.write("        // 마커이미지와 마커를 생성합니다\r\n");
      out.write("        var markerImage = createMarkerImage(\"https://cdn4.iconfinder.com/data/icons/navigation-and-location-5/100/location-11-256.png\", imageSize, imageOptions),    \r\n");
      out.write("            marker = createMarker(basicPositions[i], markerImage);  \r\n");
      out.write("        \r\n");
      out.write("     // 마커에 표시할 인포윈도우를 생성합니다 \r\n");
      out.write("        var infowindow = new kakao.maps.InfoWindow({\r\n");
      out.write("             content: basic1[i].content\r\n");
      out.write("\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        // 마커에 mouseover 이벤트와 mouseout 이벤트를 등록합니다\r\n");
      out.write("        // 이벤트 리스너로는 클로저를 만들어 등록합니다 \r\n");
      out.write("        // for문에서 클로저를 만들어 주지 않으면 마지막 마커에만 이벤트가 등록됩니다\r\n");
      out.write("        kakao.maps.event.addListener(marker, 'mouseover', makeOverListener(map, marker, infowindow));\r\n");
      out.write("        kakao.maps.event.addListener(marker, 'mouseout', makeOutListener(infowindow));\r\n");
      out.write("        \r\n");
      out.write("        \r\n");
      out.write("        // 생성된 마커를 커피숍 마커 배열에 추가합니다\r\n");
      out.write("        basicMarkers.push(marker);\r\n");
      out.write("    }     \r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 기본 마커들의 지도 표시 여부를 설정하는 함수입니다\r\n");
      out.write("function setBasicMarkers(map) {        \r\n");
      out.write("    for (var i = 0; i < basicMarkers.length; i++) {  \r\n");
      out.write("        basicMarkers[i].setMap(map);\r\n");
      out.write("    }        \r\n");
      out.write("}\r\n");
      out.write("//------------------------------------------------------------------------------------------\r\n");
      out.write("//힐링 마커를 생성하고 커피숍 마커 배열에 추가하는 함수입니다\r\n");
      out.write("function createHealingMarkers() {\r\n");
      out.write("    \r\n");
      out.write("    for (var i = 0; i < healingPositions.length; i++) {  \r\n");
      out.write("        \r\n");
      out.write("        var imageSize = new kakao.maps.Size(22, 26),\r\n");
      out.write("            imageOptions = {  \r\n");
      out.write("                spriteOrigin: new kakao.maps.Point(10, 0),    \r\n");
      out.write("                spriteSize: new kakao.maps.Size(36, 98)  \r\n");
      out.write("            };     \r\n");
      out.write("        \r\n");
      out.write("        // 마커이미지와 마커를 생성합니다\r\n");
      out.write("        var markerImage = createMarkerImage(\"https://cdn3.iconfinder.com/data/icons/free-mix/128/business_office_seo_finance_work_coffee_pause_management-09-2-256.png\", imageSize, imageOptions),    \r\n");
      out.write("            marker = createMarker(basicPositions[i], markerImage);  \r\n");
      out.write("        \r\n");
      out.write("     // 마커에 표시할 인포윈도우를 생성합니다 \r\n");
      out.write("        var infowindow = new kakao.maps.InfoWindow({\r\n");
      out.write("            content: healing1[i].content\r\n");
      out.write("\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        // 마커에 mouseover 이벤트와 mouseout 이벤트를 등록합니다\r\n");
      out.write("        // 이벤트 리스너로는 클로저를 만들어 등록합니다 \r\n");
      out.write("        // for문에서 클로저를 만들어 주지 않으면 마지막 마커에만 이벤트가 등록됩니다\r\n");
      out.write("        kakao.maps.event.addListener(marker, 'mouseover', makeOverListener(map, marker, infowindow));\r\n");
      out.write("        kakao.maps.event.addListener(marker, 'mouseout', makeOutListener(infowindow));\r\n");
      out.write("        \r\n");
      out.write("        \r\n");
      out.write("        // 생성된 마커를 커피숍 마커 배열에 추가합니다\r\n");
      out.write("        healingMarkers.push(marker);\r\n");
      out.write("    }     \r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("//힐링 마커들의 지도 표시 여부를 설정하는 함수입니다\r\n");
      out.write("function setHealingMarkers(map) {        \r\n");
      out.write("    for (var i = 0; i < healingMarkers.length; i++) {  \r\n");
      out.write("        healingMarkers[i].setMap(map);\r\n");
      out.write("    }        \r\n");
      out.write("}\r\n");
      out.write("//------------------------------------------------------------------------------------------\r\n");
      out.write("//맛집 마커를 생성하고 커피숍 마커 배열에 추가하는 함수입니다\r\n");
      out.write("function createStoreMarkers() {\r\n");
      out.write("  \r\n");
      out.write("  for (var i = 0; i < storePositions.length; i++) {  \r\n");
      out.write("      \r\n");
      out.write("      var imageSize = new kakao.maps.Size(22, 26),\r\n");
      out.write("          imageOptions = {  \r\n");
      out.write("              spriteOrigin: new kakao.maps.Point(10, 0),    \r\n");
      out.write("              spriteSize: new kakao.maps.Size(36, 98)  \r\n");
      out.write("          };     \r\n");
      out.write("      \r\n");
      out.write("      // 마커이미지와 마커를 생성합니다\r\n");
      out.write("      var markerImage = createMarkerImage(\"https://cdn3.iconfinder.com/data/icons/food-delivery-4/64/31_food_delivery_restaurant_eat-256.png\", imageSize, imageOptions),    \r\n");
      out.write("          marker = createMarker(storePositions[i], markerImage);  \r\n");
      out.write("      \r\n");
      out.write("   // 마커에 표시할 인포윈도우를 생성합니다 \r\n");
      out.write("      var infowindow = new kakao.maps.InfoWindow({\r\n");
      out.write("          content: store1[i].content\r\n");
      out.write("\r\n");
      out.write("      });\r\n");
      out.write("\r\n");
      out.write("      // 마커에 mouseover 이벤트와 mouseout 이벤트를 등록합니다\r\n");
      out.write("      // 이벤트 리스너로는 클로저를 만들어 등록합니다 \r\n");
      out.write("      // for문에서 클로저를 만들어 주지 않으면 마지막 마커에만 이벤트가 등록됩니다\r\n");
      out.write("      kakao.maps.event.addListener(marker, 'mouseover', makeOverListener(map, marker, infowindow));\r\n");
      out.write("      kakao.maps.event.addListener(marker, 'mouseout', makeOutListener(infowindow));\r\n");
      out.write("      \r\n");
      out.write("      \r\n");
      out.write("      // 생성된 마커를 커피숍 마커 배열에 추가합니다\r\n");
      out.write("      storeMarkers.push(marker);\r\n");
      out.write("  }     \r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("//맛집 마커들의 지도 표시 여부를 설정하는 함수입니다\r\n");
      out.write("function setStoreMarkers(map) {        \r\n");
      out.write("  for (var i = 0; i < storeMarkers.length; i++) {  \r\n");
      out.write("      storeMarkers[i].setMap(map);\r\n");
      out.write("  }        \r\n");
      out.write("}\r\n");
      out.write("//------------------------------------------------------------------------------------------\r\n");
      out.write("//애견동반 마커를 생성하고 커피숍 마커 배열에 추가하는 함수입니다\r\n");
      out.write("function createPetMarkers() {\r\n");
      out.write("\r\n");
      out.write("for (var i = 0; i < petPositions.length; i++) {  \r\n");
      out.write("    \r\n");
      out.write("    var imageSize = new kakao.maps.Size(22, 26),\r\n");
      out.write("        imageOptions = {  \r\n");
      out.write("            spriteOrigin: new kakao.maps.Point(10, 0),    \r\n");
      out.write("            spriteSize: new kakao.maps.Size(36, 98)  \r\n");
      out.write("        };     \r\n");
      out.write("    \r\n");
      out.write("    // 마커이미지와 마커를 생성합니다\r\n");
      out.write("    var markerImage = createMarkerImage(\"https://cdn3.iconfinder.com/data/icons/animal-40/128/Animal_Dog-256.png\", imageSize, imageOptions),    \r\n");
      out.write("        marker = createMarker(petPositions[i], markerImage);\r\n");
      out.write("    \r\n");
      out.write(" // 마커에 표시할 인포윈도우를 생성합니다 \r\n");
      out.write("    var infowindow = new kakao.maps.InfoWindow({\r\n");
      out.write("        content: pet1[i].content\r\n");
      out.write("\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    // 마커에 mouseover 이벤트와 mouseout 이벤트를 등록합니다\r\n");
      out.write("    // 이벤트 리스너로는 클로저를 만들어 등록합니다 \r\n");
      out.write("    // for문에서 클로저를 만들어 주지 않으면 마지막 마커에만 이벤트가 등록됩니다\r\n");
      out.write("    kakao.maps.event.addListener(marker, 'mouseover', makeOverListener(map, marker, infowindow));\r\n");
      out.write("    kakao.maps.event.addListener(marker, 'mouseout', makeOutListener(infowindow));\r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("    // 생성된 마커를 커피숍 마커 배열에 추가합니다\r\n");
      out.write("    petMarkers.push(marker);\r\n");
      out.write("}     \r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("//애견동반 마커들의 지도 표시 여부를 설정하는 함수입니다\r\n");
      out.write("function setPetMarkers(map) {        \r\n");
      out.write("for (var i = 0; i < petMarkers.length; i++) {  \r\n");
      out.write("    petMarkers[i].setMap(map);\r\n");
      out.write("}        \r\n");
      out.write("}\r\n");
      out.write("//------------------------------------------------------------------------------------------\r\n");
      out.write("//여행 마커를 생성하고 커피숍 마커 배열에 추가하는 함수입니다\r\n");
      out.write("function createTravelMarkers() {\r\n");
      out.write("\r\n");
      out.write("for (var i = 0; i < travelPositions.length; i++) {  \r\n");
      out.write("    \r\n");
      out.write("    var imageSize = new kakao.maps.Size(22, 26),\r\n");
      out.write("        imageOptions = {  \r\n");
      out.write("            spriteOrigin: new kakao.maps.Point(10, 0),    \r\n");
      out.write("            spriteSize: new kakao.maps.Size(36, 98)  \r\n");
      out.write("        };     \r\n");
      out.write("    \r\n");
      out.write("    // 마커이미지와 마커를 생성합니다\r\n");
      out.write("    var markerImage = createMarkerImage(\"https://cdn2.iconfinder.com/data/icons/basic-flat-icon-set/128/plane-256.png\", imageSize, imageOptions),    \r\n");
      out.write("        marker = createMarker(storePositions[i], markerImage);\r\n");
      out.write("    \r\n");
      out.write(" // 마커에 표시할 인포윈도우를 생성합니다 \r\n");
      out.write("    var infowindow = new kakao.maps.InfoWindow({\r\n");
      out.write("        content: travel1[i].content\r\n");
      out.write("\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    // 마커에 mouseover 이벤트와 mouseout 이벤트를 등록합니다\r\n");
      out.write("    // 이벤트 리스너로는 클로저를 만들어 등록합니다 \r\n");
      out.write("    // for문에서 클로저를 만들어 주지 않으면 마지막 마커에만 이벤트가 등록됩니다\r\n");
      out.write("    kakao.maps.event.addListener(marker, 'mouseover', makeOverListener(map, marker, infowindow));\r\n");
      out.write("    kakao.maps.event.addListener(marker, 'mouseout', makeOutListener(infowindow));\r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("    // 생성된 마커를 커피숍 마커 배열에 추가합니다\r\n");
      out.write("    travelMarkers.push(marker);\r\n");
      out.write("}     \r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("//여행 마커들의 지도 표시 여부를 설정하는 함수입니다\r\n");
      out.write("function setTravelMarkers(map) {        \r\n");
      out.write("for (var i = 0; i < travelMarkers.length; i++) {  \r\n");
      out.write("    travelMarkers[i].setMap(map);\r\n");
      out.write("}        \r\n");
      out.write("}\r\n");
      out.write("//------------------------------------------------------------------------------------------ \r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("// 카테고리를 클릭했을 때 type에 따라 카테고리의 스타일과 지도에 표시되는 마커를 변경합니다\r\n");
      out.write("function changeMarker(type){\r\n");
      out.write("    \r\n");
      out.write("    var basicMenu = document.getElementById('basicMenu');\r\n");
      out.write("    var healingMenu = document.getElementById('healingMenu');\r\n");
      out.write("    var storeMenu = document.getElementById('storeMenu');\r\n");
      out.write("    var petMenu = document.getElementById('petMenu');\r\n");
      out.write("    var travelMenu = document.getElementById('travelMenu');\r\n");
      out.write("\r\n");
      out.write("    \r\n");
      out.write("    // 기본 카테고리가 클릭됐을 때\r\n");
      out.write("    if (type === 'basic') {\r\n");
      out.write("    \r\n");
      out.write("        // 기본 카테고리를 선택된 스타일로 변경하고\r\n");
      out.write("        basicMenu.className = 'menu_selected';\r\n");
      out.write("        \r\n");
      out.write("        //나머지 카테고리는 선택되지 않은 스타일로 바꿉니다\r\n");
      out.write("        healingMenu.className = '';\r\n");
      out.write("        storeMenu.className = '';\r\n");
      out.write("        petMenu.className = '';\r\n");
      out.write("        travelMenu.className = '';\r\n");
      out.write("\r\n");
      out.write("        \r\n");
      out.write("        // 기본 마커들만 지도에 표시하도록 설정합니다\r\n");
      out.write("        setBasicMarkers(map);\r\n");
      out.write("        setHealingMarkers(null);\r\n");
      out.write("        setStoreMarkers(null);\r\n");
      out.write("        setPetMarkers(null);\r\n");
      out.write("        setTravelMarkers(null);\r\n");
      out.write("        \r\n");
      out.write("    } else if (type === 'healing') { // 힐링 카테고리가 클릭됐을 때\r\n");
      out.write("    \r\n");
      out.write("        // 힐링 카테고리를 선택된 스타일로 변경하고\r\n");
      out.write("        basicMenu.className = '';\r\n");
      out.write("        healingMenu.className = 'menu_selected';\r\n");
      out.write("        storeMenu.className = '';\r\n");
      out.write("        petMenu.className = '';\r\n");
      out.write("        travelMenu.className = '';\r\n");
      out.write("        \r\n");
      out.write("        // 힐링 마커들만 지도에 표시하도록 설정합니다\r\n");
      out.write("        setBasicMarkers(null);\r\n");
      out.write("        setHealingMarkers(map);\r\n");
      out.write("        setStoreMarkers(null);\r\n");
      out.write("        setPetMarkers(null);\r\n");
      out.write("        setTravelMarkers(null);\r\n");
      out.write("        \r\n");
      out.write("    } else if (type === 'store') { // 맛집 카테고리가 클릭됐을 때\r\n");
      out.write("     \r\n");
      out.write("        // 맛집 카테고리를 선택된 스타일로 변경하고\r\n");
      out.write("        basicMenu.className = '';\r\n");
      out.write("        healingMenu.className = '';\r\n");
      out.write("        storeMenu.className = 'menu_selected';\r\n");
      out.write("        petMenu.className = '';\r\n");
      out.write("        travelMenu.className = '';\r\n");
      out.write("        \r\n");
      out.write("        // 맛집 마커들만 지도에 표시하도록 설정합니다\r\n");
      out.write("        setBasicMarkers(null);\r\n");
      out.write("        setHealingMarkers(null);\r\n");
      out.write("        setStoreMarkers(map);\r\n");
      out.write("        setPetMarkers(null);\r\n");
      out.write("        setTravelMarkers(null);\r\n");
      out.write("    } else if (type === 'pet') { // 애견 카테고리가 클릭됐을 때\r\n");
      out.write("     \r\n");
      out.write("        // 애견 카테고리를 선택된 스타일로 변경하고\r\n");
      out.write("        basicMenu.className = '';\r\n");
      out.write("        healingMenu.className = '';\r\n");
      out.write("        storeMenu.className = '';\r\n");
      out.write("        petMenu.className = 'menu_selected';\r\n");
      out.write("        travelMenu.className = '';\r\n");
      out.write("        \r\n");
      out.write("        // 애견 마커들만 지도에 표시하도록 설정합니다\r\n");
      out.write("        setBasicMarkers(null);\r\n");
      out.write("        setHealingMarkers(null);\r\n");
      out.write("        setStoreMarkers(null);\r\n");
      out.write("        setPetMarkers(map);\r\n");
      out.write("        setTravelMarkers(null);\r\n");
      out.write("    } else if (type === 'travel') { // 여행 카테고리가 클릭됐을 때\r\n");
      out.write("     \r\n");
      out.write("        // 여행 카테고리를 선택된 스타일로 변경하고\r\n");
      out.write("        basicMenu.className = '';\r\n");
      out.write("        healingMenu.className = '';\r\n");
      out.write("        storeMenu.className = '';\r\n");
      out.write("        petMenu.className = '';\r\n");
      out.write("        travelMenu.className = 'menu_selected';\r\n");
      out.write("        \r\n");
      out.write("        // 여행 마커들만 지도에 표시하도록 설정합니다\r\n");
      out.write("        setBasicMarkers(null);\r\n");
      out.write("        setHealingMarkers(null);\r\n");
      out.write("        setStoreMarkers(null);\r\n");
      out.write("        setPetMarkers(null);\r\n");
      out.write("        setTravelMarkers(map); \r\n");
      out.write("    }            \r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("//인포윈도우를 표시하는 클로저를 만드는 함수입니다 \r\n");
      out.write("function makeOverListener(map, marker, infowindow) {\r\n");
      out.write("    return function() {\r\n");
      out.write("        infowindow.open(map, marker);\r\n");
      out.write("    };\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 인포윈도우를 닫는 클로저를 만드는 함수입니다 \r\n");
      out.write("function makeOutListener(infowindow) {\r\n");
      out.write("    return function() {\r\n");
      out.write("        infowindow.close();\r\n");
      out.write("    };\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
